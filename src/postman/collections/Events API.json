{
	"info": {
		"_postman_id": "084a0c2b-d2e4-4f54-b5a5-5c43a1474469",
		"name": "Events API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "17255397-084a0c2b-d2e4-4f54-b5a5-5c43a1474469"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf5bef2a-de25-4ce3-aebb-c97c5a5d9eaf",
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response body is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Each object in the response array has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"",
									"    responseData.forEach(function (user) {",
									"        pm.expect(user.id).to.exist.and.to.be.a('string');",
									"        pm.expect(user.username).to.exist.and.to.be.a('string');",
									"        pm.expect(user.password).to.exist.and.to.be.a('string');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Username is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (user) {",
									"        pm.expect(user.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response body is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Username is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (user) {",
									"        pm.expect(user.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ccc972fb-6123-4a95-9cdf-d29c0798b2ac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"id": "1a0d69dd-262e-4369-abed-1f80283f500d",
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"username\": \"john_doe\",\n        \"password\": \"p@ssw0rd1\"\n    },\n    {\n        \"id\": 2,\n        \"username\": \"jane_doe\",\n        \"password\": \"p@ssw0rd2\"\n    },\n    {\n        \"id\": 3,\n        \"username\": \"bob_smith\",\n        \"password\": \"p@ssw0rd3\"\n    }\n]"
						}
					]
				},
				{
					"name": "Get user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ea853c2-4160-4ddb-bc09-ff713b260747",
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Username is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.username).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Password is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.password).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Password should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is in an acceptable range\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"",
									"",
									"",
									"pm.test(\"Response has the required fields - id, username, and password\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.username).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.password).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Username is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Password is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.password).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Password should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Validate username field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the password field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.password).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Password field should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is in an acceptable range\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2883a88a-2d6c-465b-a93e-fe37eb330b27",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": [
						{
							"id": "4cd7f6ae-aac4-4411-ad31-36c7da0f7958",
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"username\": \"john_doe\",\n    \"password\": \"p@ssw0rd1\"\n}"
						},
						{
							"id": "10ce345b-3896-4a48-a4de-d256ed815471",
							"name": "Non-existing ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"1"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "039251d0-cfe5-4684-958d-a5743501b118",
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Username is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.username).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "595ed2e3-f959-48f5-bc8b-84e94d988d8e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"john_wick\",\n    \"password\": \"p@ssw0rd999\",\n    \"name\": \"John Wick\",\n    \"image\": \"https://images2.alphacoders.com/131/1314280.jpeg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"id": "9cbd21bf-adbf-48c3-813b-6ed9ff9be4da",
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"john_wick\",\n    \"password\": \"p@ssw0rd999\",\n    \"name\": \"John Wick\",\n    \"image\": \"https://images2.alphacoders.com/131/1314280.jpeg\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": {{$randomUUID}},\n    \"username\": \"john_wick\",\n    \"password\": \"p@ssw0rd999\"\n}"
						}
					]
				},
				{
					"name": "Update user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f03e22b-2740-4a69-a282-d13dc68ea60e",
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "13750707-8c34-435a-b638-6cf4bfe0a811",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"hehheheh\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": [
						{
							"id": "741592a7-65c8-4aad-8ae4-7bb10fb57d16",
							"name": "Success (Update password)",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": {{$randomUUID}},\n    \"username\": \"john_wick\",\n    \"password\": \"newPassword123\"\n}"
						}
					]
				},
				{
					"name": "Delete user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba2d50f-8bf4-4696-9488-43d0fc781fb7",
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate that the response message field is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "71651343-811e-4533-ae7a-32b954ade44b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": [
						{
							"id": "df629d25-b336-403f-9bdb-fc9d46ac59eb",
							"name": "Success (Delete user 2)",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "dbb68863-e945-49ca-83cf-10fb5b2355a9",
			"description": "REST API endpoints for managing users."
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Get all events",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "764bff90-a64b-416c-95bb-bb8d33ac3d58",
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response body is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5d73c597-0ac7-4884-853b-b3c29753934f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events?location=My+back+yard",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "location",
									"value": "My+back+yard"
								}
							]
						}
					},
					"response": [
						{
							"id": "9f1f4329-9064-403d-a803-489a44fe9c67",
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "[\n    {\n      \"id\": 1,\n      \"createdBy\": 1,\n      \"title\": \"Trampoline party\",\n      \"description\": \"Bounce around with your friends\",\n      \"image\": \"https://i.pinimg.com/736x/3d/2f/af/3d2faf4e3188d34a9fcdc00df59e77b0.jpg\",\n      \"categoryIds\": [2],\n      \"location\": \"My back yard\",\n      \"startTime\": \"2023-03-10T18:00\",\n      \"endTime\": \"2023-03-10T17:00:00.000Z\"\n    },\n    {\n      \"id\": 2,\n      \"createdBy\": 1,\n      \"title\": \"Laser Tag mania\",\n      \"description\": \"Let's play laser tag!\",\n      \"image\": \"https://www.ctvnews.ca/polopoly_fs/1.5118552.1600965663!/httpImage/image.jpg_gen/derivatives/landscape_1020/image.jpg\",\n      \"categoryIds\": [2],\n      \"location\": \"Blinded by the Lights Laser Tag, 15 Main St.\",\n      \"startTime\": \"2023-04-06T18:46\",\n      \"endTime\": \"2023-04-06T17:46\"\n    },\n    {\n      \"id\": 3,\n      \"createdBy\": 2,\n      \"title\": \"Badminton game\",\n      \"description\": \"Hit that shuttle!\",\n      \"image\": \"https://s3.eu-west-2.amazonaws.com/ws-activestirling/production/Badminton/_1200x630_crop_center-center_none/Badminton-3.jpg\",\n      \"categoryIds\": [1, 2],\n      \"location\": \"The Park\",\n      \"startTime\": \"2023-03-15T12:00:00.000Z\",\n      \"endTime\": \"2023-03-15T13:30:00.000Z\"\n    },\n    {\n      \"id\": 4,\n      \"createdBy\": 2,\n      \"title\": \"Yoga\",\n      \"description\": \"It's a bit of a stretch.\",\n      \"image\": \"https://ymcasouthflorida.org/wp-content/uploads/2019/12/AA2I8910-scaled.jpg\",\n      \"categoryIds\": [3],\n      \"location\": \"Shavasana Yoga School\",\n      \"startTime\": \"2023-03-09T06:00:00.000Z\",\n      \"endTime\": \"2023-03-09T07:00:00.000Z\"\n    }\n  ]"
						}
					]
				},
				{
					"name": "Get event by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52457618-b80d-422c-875e-8e2b09675a0c",
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"ID is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "363bc2ae-5249-45fc-ac95-a3ba3a8ff802",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"1"
							]
						}
					},
					"response": [
						{
							"id": "7cc0a2c5-8f25-4a7d-a92e-72b3e49dd6f0",
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"createdBy\": 1,\n    \"title\": \"Trampoline party\",\n    \"description\": \"Bounce around with your friends\",\n    \"image\": \"https://i.pinimg.com/736x/3d/2f/af/3d2faf4e3188d34a9fcdc00df59e77b0.jpg\",\n    \"categoryIds\": [2],\n    \"location\": \"My back yard\",\n    \"startTime\": \"2023-03-10T18:00\",\n    \"endTime\": \"2023-03-10T17:00:00.000Z\"\n}"
						},
						{
							"id": "2024a149-b44d-4b7d-a700-b8c4e49bc5a4",
							"name": "Non-existing ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"1"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create new event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0df90089-099d-434a-82d8-40e8760cc07f",
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9edca9b8-0266-4d08-adf5-fedc2bd25162",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"createdBy\": \"1\",\n      \"title\": \"Boardgame party\",\n      \"description\": \"Turn off with friends or family through playing some nice games\",\n      \"image\": \"https://image.cnbcfm.com/api/v1/image/104151701-GettyImages-143949731.jpg?\",\n      \"categoryIds\": [\"1\", \"2\"],\n      \"location\": \"Townhall\",\n      \"startTime\": \"2023-03-10T17:00:00.000Z\",\n      \"endTime\": \"2023-03-10T18:00:00.000Z\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": [
						{
							"id": "2b69c41d-bece-436a-a9e7-31d595faf5ec",
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"createdBy\": 1,\n      \"title\": \"Boardgame party\",\n      \"description\": \"Turn off with friends or family through playing some nice games\",\n      \"image\": \"https://image.cnbcfm.com/api/v1/image/104151701-GettyImages-143949731.jpg?\",\n      \"categoryIds\": [2],\n      \"location\": \"Townhall\",\n      \"startTime\": \"2023-03-10T18:00\",\n      \"endTime\": \"2023-03-10T17:00:00.000Z\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": {{$randomUUID}},\n    \"createdBy\": 1,\n    \"title\": \"Trampoline party\",\n    \"description\": \"Bounce around with your friends\",\n    \"image\": \"https://i.pinimg.com/736x/3d/2f/af/3d2faf4e3188d34a9fcdc00df59e77b0.jpg\",\n    \"categoryIds\": [2],\n    \"location\": \"My back yard\",\n    \"startTime\": \"2023-03-10T18:00\",\n    \"endTime\": \"2023-03-10T17:00:00.000Z\"\n}"
						}
					]
				},
				{
					"name": "Update event by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d01376c3-4737-4724-8af1-609cc3b26292",
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the response message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string', \"Message should be a string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4912373c-f2e7-4e61-9580-368090cd5b28",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"something_unknown\": \"My Boat House\",\n    \"createdBy\": \"1\",\n    \"categoryIds\": [\"1\", \"2\", \"3\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"1"
							]
						}
					},
					"response": [
						{
							"id": "74bae7c1-9fbd-4c8f-a1a5-44a78068bbe2",
							"name": "Success (Update location)",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"something_unknown\": \"My Boat House\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"createdBy\": 1,\n    \"title\": \"Trampoline party\",\n    \"description\": \"Bounce around with your friends\",\n    \"image\": \"https://i.pinimg.com/736x/3d/2f/af/3d2faf4e3188d34a9fcdc00df59e77b0.jpg\",\n    \"categoryIds\": [2],\n    \"location\": \"City Beach\",\n    \"startTime\": \"2023-03-10T18:00\",\n    \"endTime\": \"2023-03-10T17:00:00.000Z\"\n}"
						}
					]
				},
				{
					"name": "Delete event by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e855202-6498-4db4-a41b-c80bb23b5432",
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the response message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string', \"Message should be a string\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2d917efe-beac-4b8d-be05-09371cdec712",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"2"
							]
						}
					},
					"response": [
						{
							"id": "720e380c-413b-4dad-8869-c4747bd38d2c",
							"name": "Success (Delete user 2)",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "74c8184c-f0d5-447a-a804-fdc2682c2202",
			"description": "REST API endpoints for managing events."
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Get all categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1f60024-ab77-4f42-940b-945b551b3283",
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response body is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "72e78a12-46fb-4a71-9aba-ab0ad8f91238",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": [
						{
							"id": "93a9ff7f-6ff9-4653-aebd-728086484d5a",
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								"",
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": "[\n    {\n        \"name\": \"sports\",\n        \"id\": 1\n    },\n    {\n        \"name\": \"games\",\n        \"id\": 2\n    },\n    {\n        \"name\": \"relaxation\",\n        \"id\": 3\n    }\n]"
						}
					]
				},
				{
					"name": "Get category by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b5d26f0-e05c-460f-b088-63c7f7b4c20e",
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields - name and id\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "97a35446-91c4-4b30-8e75-cd9a7a4334ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/categories/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"1"
							]
						}
					},
					"response": [
						{
							"id": "ec0d7269-c14b-4d14-bbab-9d126b3e55f2",
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": "{\n    \"name\": \"sports\",\n    \"id\": 1\n}"
						},
						{
							"id": "fb412fe7-7336-4888-ba1b-b87e1203cc19",
							"name": "Non-existing ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										"1"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": ""
						}
					]
				},
				{
					"name": "Update category by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a1fbb67-69e4-42dc-a007-f9b76ca830dd",
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "db1772b7-7590-4d47-aa8c-f68c3169dda4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"My favorite category\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"3"
							]
						}
					},
					"response": [
						{
							"id": "3f4fbd58-987a-40bc-bd3a-140ccfea6e17",
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"My favorite category\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories/100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										"100"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": "{\n    \"name\": \"sports\",\n    \"id\": 1\n}"
						},
						{
							"id": "f492f215-45ec-45a2-a831-df9a1cf0cbbc",
							"name": "Non-existing ID",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"My favorite category\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories/100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										"100"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": ""
						}
					]
				},
				{
					"name": "Delete category by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3a3b9c9-389e-4e5c-a825-5abc5e1b3aac",
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the response message field\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "199ea72e-4adb-45ac-81c2-57f9cb99a9a5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/categories/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"2"
							]
						}
					},
					"response": [
						{
							"id": "686f489a-57f7-4e92-83ce-0d8eca0da0e4",
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										"100"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": "{\n    \"name\": \"sports\",\n    \"id\": 1\n}"
						},
						{
							"id": "27af7c0b-9c33-4c52-8c79-564100a5c01f",
							"name": "Non-existing ID",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										"100"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": ""
						}
					]
				},
				{
					"name": "Create new category",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a76bbfc3-25cc-437d-af40-1ac3660f8ba1",
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields - id and name\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"id is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"id should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a4a6c56c-57c4-4704-81d1-b8a5aef70c47",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"networking\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				}
			],
			"id": "eea0e062-40d6-4d90-98d1-54883aefb945",
			"description": "REST API endpoints for managing event categories."
		},
		{
			"name": "Log in",
			"id": "d12f8a9f-b3e5-43e2-96e1-7e4dde79bfd5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"ignacio_doe\",\n    \"password\": \"p@ssw0rd1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "475b4302-85be-4ff7-8432-3e5da86eeef5",
				"type": "text/javascript",
				"exec": [
					"pm.sendRequest({",
					"    url: 'http://0.0.0.0:3000/login',",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type': 'application/json'",
					"    },",
					"    body: {",
					"        mode: 'raw',",
					"        raw: JSON.stringify({",
					"            username: 'ignacio_doe',",
					"            password: 'p@ssw0rd1'",
					"        })",
					"    }",
					"}, function (err, response) {",
					"    if (err) {",
					"        console.error('Login request failed:', err);",
					"        return;",
					"    }",
					"    ",
					"    var responseBody = JSON.parse(response.text());",
					"    pm.environment.set('bearerToken', responseBody.token); // Assuming the token is in a 'token' property",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "594af7cd-60e8-4882-89ef-cc8891e2a25f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}