{
	"info": {
		"_postman_id": "af577c72-62af-4592-8334-987bbc3e921c",
		"name": "Events API Negative",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "17255397-af577c72-62af-4592-8334-987bbc3e921c"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Get user by ID - user not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2729de5b-5627-4eee-904b-54e091c83ff4",
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7d47c53c-a311-4718-8936-aa9158d95eb1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"999"
							]
						}
					},
					"response": [
						{
							"id": "269b7654-2a8c-4712-a414-9cc79a8040e5",
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"username\": \"john_doe\",\n    \"password\": \"p@ssw0rd1\"\n}"
						},
						{
							"id": "bc139610-b7a2-47dc-a262-66b341330827",
							"name": "Non-existing ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"1"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create new user - unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4748fb59-9465-41a3-a489-fe61ae3cde21",
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "db419d13-322d-475e-9f17-5634a7be9d73",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"john_wick\",\n    \"password\": \"p@ssw0rd999\",\n    \"name\": \"John Wick\",\n    \"image\": \"https://images2.alphacoders.com/131/1314280.jpeg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"id": "2f05fed9-c02e-4a93-89fc-05ec7a345edc",
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"john_wick\",\n    \"password\": \"p@ssw0rd999\",\n    \"name\": \"John Wick\",\n    \"image\": \"https://images2.alphacoders.com/131/1314280.jpeg\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": {{$randomUUID}},\n    \"username\": \"john_wick\",\n    \"password\": \"p@ssw0rd999\"\n}"
						}
					]
				},
				{
					"name": "Update user by ID - unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42d89db1-6882-4296-be5f-60cd882f874d",
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e562c9a0-22bf-4fe1-97e0-dc21fcc4b8da",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": [
						{
							"id": "972a7353-6fb0-49a0-a7db-a889c5990876",
							"name": "Success (Update password)",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": {{$randomUUID}},\n    \"username\": \"john_wick\",\n    \"password\": \"newPassword123\"\n}"
						}
					]
				},
				{
					"name": "Update user by ID - user not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a10a1759-3e74-49d4-abce-f9d527967458",
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "62148451-964d-406d-970e-b904b37b42e0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/100",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"100"
							]
						}
					},
					"response": [
						{
							"id": "6f04c3de-4a10-4683-9c78-c9d629ec2edc",
							"name": "Success (Update password)",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": {{$randomUUID}},\n    \"username\": \"john_wick\",\n    \"password\": \"newPassword123\"\n}"
						}
					]
				},
				{
					"name": "Delete user by ID - unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6710c1c-52ec-42cd-a0b1-91b750477f12",
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8751d505-8787-42dd-bb04-091f2e6aa9f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": [
						{
							"id": "a642f4d0-674d-4630-b9e0-c59e53aca119",
							"name": "Success (Delete user 2)",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete user by ID - user not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1549d0ca-5390-44ee-a2aa-ab2ff0fa7ea1",
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.message).to.exist.and.to.be.a(\"string\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b92e6980-4ca0-4349-8654-32bf881a49c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/100",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"100"
							]
						}
					},
					"response": [
						{
							"id": "372c979f-50ce-4868-87d0-e59216c88736",
							"name": "Success (Delete user 2)",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "05d0b31b-91ca-45c8-b8bc-a2f7c8a9e548",
			"description": "REST API endpoints for managing users."
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Get event by ID - event not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51383ea4-4601-49c5-93c0-f5439fb1575c",
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8ef139e4-9499-4016-954a-9b93b015f1dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/100",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"100"
							]
						}
					},
					"response": [
						{
							"id": "6397d403-dfab-41d2-9cad-6fff8f1a4a91",
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"createdBy\": 1,\n    \"title\": \"Trampoline party\",\n    \"description\": \"Bounce around with your friends\",\n    \"image\": \"https://i.pinimg.com/736x/3d/2f/af/3d2faf4e3188d34a9fcdc00df59e77b0.jpg\",\n    \"categoryIds\": [2],\n    \"location\": \"My back yard\",\n    \"startTime\": \"2023-03-10T18:00\",\n    \"endTime\": \"2023-03-10T17:00:00.000Z\"\n}"
						},
						{
							"id": "8e55ae2d-5dd6-427c-8727-bf011084c9e2",
							"name": "Non-existing ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"1"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create new event - unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15b02e4c-9e22-41a1-bebf-3a0ba664f11f",
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ab6d3c43-9071-4e10-935d-adb8443fe2c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"createdBy\": 1,\n      \"title\": \"Boardgame party\",\n      \"description\": \"Turn off with friends or family through playing some nice games\",\n      \"image\": \"https://image.cnbcfm.com/api/v1/image/104151701-GettyImages-143949731.jpg?\",\n      \"categoryIds\": [2],\n      \"location\": \"Townhall\",\n      \"startTime\": \"2023-03-10T18:00\",\n      \"endTime\": \"2023-03-10T17:00:00.000Z\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": [
						{
							"id": "36878950-6889-45d1-a4d4-38fd20b952d4",
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"createdBy\": 1,\n      \"title\": \"Boardgame party\",\n      \"description\": \"Turn off with friends or family through playing some nice games\",\n      \"image\": \"https://image.cnbcfm.com/api/v1/image/104151701-GettyImages-143949731.jpg?\",\n      \"categoryIds\": [2],\n      \"location\": \"Townhall\",\n      \"startTime\": \"2023-03-10T18:00\",\n      \"endTime\": \"2023-03-10T17:00:00.000Z\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": {{$randomUUID}},\n    \"createdBy\": 1,\n    \"title\": \"Trampoline party\",\n    \"description\": \"Bounce around with your friends\",\n    \"image\": \"https://i.pinimg.com/736x/3d/2f/af/3d2faf4e3188d34a9fcdc00df59e77b0.jpg\",\n    \"categoryIds\": [2],\n    \"location\": \"My back yard\",\n    \"startTime\": \"2023-03-10T18:00\",\n    \"endTime\": \"2023-03-10T17:00:00.000Z\"\n}"
						}
					]
				},
				{
					"name": "Update event by ID - unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2abf7c44-f670-49fc-a972-8c917f76966d",
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Validate response message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1df260f3-dfb4-4f2d-90e9-9a284c7f0f5b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"something_unknown\": \"My Boat House\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"1"
							]
						}
					},
					"response": [
						{
							"id": "bde7e1be-f4f4-4bf3-81c1-57a0d10eb3b1",
							"name": "Success (Update location)",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"something_unknown\": \"My Boat House\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"createdBy\": 1,\n    \"title\": \"Trampoline party\",\n    \"description\": \"Bounce around with your friends\",\n    \"image\": \"https://i.pinimg.com/736x/3d/2f/af/3d2faf4e3188d34a9fcdc00df59e77b0.jpg\",\n    \"categoryIds\": [2],\n    \"location\": \"City Beach\",\n    \"startTime\": \"2023-03-10T18:00\",\n    \"endTime\": \"2023-03-10T17:00:00.000Z\"\n}"
						}
					]
				},
				{
					"name": "Delete event by ID  - unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a4563ce-0e54-407c-9b66-9895b36e6fde",
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property(\"message\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "daa5f8b4-abab-44b0-8a84-fdc4e44f42bb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"2"
							]
						}
					},
					"response": [
						{
							"id": "243da1e1-72f2-4fe5-ad95-84dc3f360050",
							"name": "Success (Delete user 2)",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "9e3137c2-c003-419d-83e3-58a67d6a00c3",
			"description": "REST API endpoints for managing events."
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Get category by ID - category not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a0bcadc-639f-437b-93cb-277f1385e4bc",
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3fdb8d58-f962-4afd-92c6-2c91cb535cd5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/categories/100",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"100"
							]
						}
					},
					"response": [
						{
							"id": "dc961f41-6593-4f3a-bfc4-e02422881377",
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": "{\n    \"name\": \"sports\",\n    \"id\": 1\n}"
						},
						{
							"id": "8c6b0a47-f0f9-4938-8409-97a4203f6e36",
							"name": "Non-existing ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										"1"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": ""
						}
					]
				},
				{
					"name": "Update category by ID - category not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8a0b6da-3b44-4007-a270-ba8f4da77c4b",
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "794c6e39-9447-4b68-a618-c4d99759b7b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"My favorite category\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories/100",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"100"
							]
						}
					},
					"response": [
						{
							"id": "ed302ac7-77c2-43df-a5e0-33244e96e845",
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"My favorite category\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories/100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										"100"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": "{\n    \"name\": \"sports\",\n    \"id\": 1\n}"
						},
						{
							"id": "c1231a8d-6eb1-466d-a4fe-26de827951f0",
							"name": "Non-existing ID",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"My favorite category\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories/100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										"100"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": ""
						}
					]
				},
				{
					"name": "Update category by ID - unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15c64cbb-d9d8-4b96-9083-3edb7ac26d3c",
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2c206256-2a69-48c3-8e75-8b2e05502e54",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"My favorite category\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"3"
							]
						}
					},
					"response": [
						{
							"id": "13a1714c-abc5-4350-9dec-c6a39371d3e2",
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"My favorite category\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories/100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										"100"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": "{\n    \"name\": \"sports\",\n    \"id\": 1\n}"
						},
						{
							"id": "4d631cfb-ba39-4f3f-95c5-e3d255f78b8f",
							"name": "Non-existing ID",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"My favorite category\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories/100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										"100"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": ""
						}
					]
				},
				{
					"name": "Delete category by ID - category not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87967845-2935-4b8d-8338-adaedf26c732",
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0bf182ee-b8cf-4898-ab3c-376da401a06c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/categories/100",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"100"
							]
						}
					},
					"response": [
						{
							"id": "8b3a7208-ff62-4ea7-b4c7-15da496aa12f",
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										"100"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": "{\n    \"name\": \"sports\",\n    \"id\": 1\n}"
						},
						{
							"id": "33cac228-753c-4981-9806-3f4727a2b899",
							"name": "Non-existing ID",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										"100"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": ""
						}
					]
				},
				{
					"name": "Delete category by ID - unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc06d9bd-ac7e-4f90-ae10-9c6bff9b7ff9",
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "df8b284e-97b7-4e72-9da4-8dbe24402bc9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/categories/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"2"
							]
						}
					},
					"response": [
						{
							"id": "54b28bc5-2f6f-459e-af1e-7894b4659128",
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										"100"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": "{\n    \"name\": \"sports\",\n    \"id\": 1\n}"
						},
						{
							"id": "06ec73c9-ab8e-4f88-a344-3ec95dfb56b3",
							"name": "Non-existing ID",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										"100"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": ""
						}
					]
				},
				{
					"name": "Create new category - unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c8b049a-a56a-4c77-8caa-3a1b6e4f5eb1",
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4f59b213-5f6e-4957-ab0d-9ee3ff381ad3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"networking\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				}
			],
			"id": "e6c689a0-f99e-4934-a07d-54ade3f5b8d0",
			"description": "REST API endpoints for managing event categories."
		},
		{
			"name": "Log in - invalid credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c2567d16-33ce-4747-90a1-460b5085ad43",
						"exec": [
							"",
							"pm.test(\"Response status code is 401\", function () {",
							"    pm.expect(pm.response.code).to.equal(401);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - message\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response content type is JSON\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "19b92247-c615-416a-95d7-a19f0f9652b9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"something\",\n    \"password\": \"wrong\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "1ca586f7-8f3f-4609-8cea-b7fb1c98eac1",
				"type": "text/javascript",
				"exec": [
					"pm.sendRequest({",
					"    url: 'http://0.0.0.0:3000/login',",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type': 'application/json'",
					"    },",
					"    body: {",
					"        mode: 'raw',",
					"        raw: JSON.stringify({",
					"            username: 'ignacio_doe',",
					"            password: 'p@ssw0rd1'",
					"        })",
					"    }",
					"}, function (err, response) {",
					"    if (err) {",
					"        console.error('Login request failed:', err);",
					"        return;",
					"    }",
					"    ",
					"    var responseBody = JSON.parse(response.text());",
					"    pm.environment.set('bearerToken', responseBody.token); // Assuming the token is in a 'token' property",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "89457d56-a1ec-4a7a-a442-318fcc470c1a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}